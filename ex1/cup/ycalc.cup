/* ----------------------User code--------------------*/

package src;
   
/* ------------Grammar symbol declarations----------- */
   
terminal                PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, SEMI, EQ, PRINT, IF, THEN,ELSE, WHILE, DO, 
                        BEGIN, END, INT, FLOAT, BOOL, ENDIF, EQUALTO, LESSTHAN, GREATERTHAN,
                        LESSTHANEQ, GREATERTHANEQ, NOTEQUAL, AND, OR, NOT,VOID, RETURN, XOR;
terminal Boolean        BOOLEAN;
terminal Integer        INTEGER;
terminal Float          FLOATING;
terminal String         ID;

non terminal Object    program, function_list;
non terminal Type      type;
non terminal Astat     statement,assignment,statement_part,print,ifthen,while,declaration,functiondecl,functioncall;
non terminal Lstat     statement_list;
non terminal Aexp      expr, term,factor,logic,comparison;

   
/* ------------Grammar rules----------- */

program ::= statement_list:s
                {: s.execute();:}
            |function_list:fl statement_list:s
                {: s.execute();:}
            |statement_list:s function_list:fl
                {: s.execute(); :}
            |function_list:fl;


statement_list ::=  statement_list:l statement:s
                        {: RESULT = new Lstat(l,s) ; :}                 
                   | statement:s
                      {: RESULT = new Lstat(s); :};

function_list ::=  function_list:fl functiondecl:fd
                  |functiondecl:fd;

statement    ::=    assignment:s SEMI
                        {: RESULT = s;:}
                    |declaration:s SEMI
                        {:RESULT = s; :}
                    | print:s SEMI
                        {: RESULT = s; :}
                    | ifthen:s
                        {: RESULT = s; :}
                    | while:s
                        {: RESULT = s; :}
                    | BEGIN statement_list:s END 
                        {: RESULT = Astat.block(s); :}
                    |functioncall:s SEMI
                        {: RESULT = s; :};

functiondecl ::= VOID ID:i LPAREN RPAREN BEGIN statement_list:l END
                    {: RESULT = Astat.functiondecl( i , l); :}
                 |type:t ID:i LPAREN RPAREN BEGIN statement_list:s RETURN expr:e SEMI END
                    {: RESULT = Astat.functiondecl( t , i, s, e); :};

functioncall ::= ID:i LPAREN RPAREN 
                  {: RESULT = Astat.functioncall(i); :}
                 |ID:i1 EQ ID:i2 LPAREN RPAREN
                    {: RESULT = Astat.functioncall(i1,i2); :};

declaration ::= type:t ID:i
                    {:  RESULT = Astat.declaration(t, i); :};

assignment   ::= ID:i EQ expr:e
                    {: RESULT = Astat.assignment(i,e); :}
                |type:t ID:i EQ expr:e
                    {: RESULT = Astat.assignment(t, i , e); :};

print  ::= PRINT expr:e
            {: RESULT = Astat.print(e); :};

ifthen ::= IF LPAREN expr:e RPAREN statement:s ENDIF
            {: RESULT = Astat.ifthen(e,s); :}
           |IF LPAREN expr:e RPAREN statement:s1 ELSE statement:s2 ENDIF
            {: RESULT = Astat.ifthenelse(e,s1,s2); :};

while  ::= WHILE LPAREN expr:e RPAREN DO statement:s
            {: RESULT = Astat.whileloop(e,s); :};

type ::= INT
            {: RESULT = new Type().integer();:}
         |FLOAT
            {: RESULT = new Type().floating();:}
         |BOOL
            {:RESULT = new Type().bool();:};
   
expr      ::= expr:e PLUS term:t
                 {: RESULT = new Aexp(new Args(e,t), sym.PLUS); :}
              |expr:e MINUS term:t
                 {: RESULT = new Aexp(new Args(e,t), sym.MINUS); :}
              |term:t
                 {: RESULT = t; :}
              |comparison:c
                 {:RESULT = c; :}
              |logic:l
                 {:RESULT = l; :};


 term    ::= term:t TIMES factor:f
                 {: RESULT = new Aexp(new Args(t,f), sym.TIMES); :}
             |term:t DIVIDE factor:f
                 {: RESULT = new Aexp(new Args(t,f), sym.DIVIDE); :}
             |factor:f
                 {: RESULT = f; :};
             

 comparison   ::= factor:f1 EQUALTO factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.EQUALTO);:}
                 |factor:f1 LESSTHAN factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.LESSTHAN);:}
                 |factor:f1 GREATERTHAN factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.GREATERTHAN);:}
                 |factor:f1 LESSTHANEQ factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.LESSTHANEQ);:}
                 |factor:f1 GREATERTHANEQ factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.GREATERTHANEQ);:}
                 |factor:f1 NOTEQUAL factor:f2
                    {:RESULT = new Aexp(new Args(f1,f2), sym.NOTEQUAL);:};

 logic   ::= factor:f1 AND factor:f2
                {:RESULT = new Aexp(new Args(f1,f2), sym.AND);:}
             |factor:f1 OR factor:f2
                {:RESULT = new Aexp(new Args(f1,f2), sym.OR);:}
             |NOT factor:f
                {:RESULT = new Aexp(new OneArg(f), sym.NOT);:}
             |factor:f1 XOR factor:f2
                {:RESULT = new Aexp(new Args(f1,f2), sym.XOR);:};

 factor      ::= LPAREN expr:e RPAREN
                    {: RESULT = e; :}
                 |INTEGER:n
                    {: RESULT = new Aexp(n); :}
                 |FLOATING:fo
                    {: RESULT = new Aexp(fo); :}
                 |ID:i
                    {: RESULT = new Aexp(i); :}
                 |BOOLEAN:m
                    {: RESULT = new Aexp(m); :};

